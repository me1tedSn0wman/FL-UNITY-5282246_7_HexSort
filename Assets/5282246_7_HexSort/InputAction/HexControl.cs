//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/5282246_7_HexSort/InputAction/HexControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HexControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HexControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HexControl"",
    ""maps"": [
        {
            ""name"": ""GameplayControl"",
            ""id"": ""52c8805e-abe1-40f6-af2c-f1a2c7b4405c"",
            ""actions"": [
                {
                    ""name"": ""mousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""ec85d7c3-6f2a-404e-a33e-05f6a6af4143"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""mouseButton"",
                    ""type"": ""Button"",
                    ""id"": ""0c0f5211-9671-4721-9831-73b8108858c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""89fa5c44-5997-407f-b2b1-7bda9704bd49"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09b70f4a-2039-4cbc-84cf-e7641ab90e74"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7cecb2b-7515-43e1-a4e9-6de4a9ed0990"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30fe9389-7278-4949-b474-f39e14fc81e9"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bee2d4d8-c538-4b54-9e13-0ae3790cd805"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47fbb04a-bf41-4f35-8273-8675da61c958"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayControl
        m_GameplayControl = asset.FindActionMap("GameplayControl", throwIfNotFound: true);
        m_GameplayControl_mousePosition = m_GameplayControl.FindAction("mousePosition", throwIfNotFound: true);
        m_GameplayControl_mouseButton = m_GameplayControl.FindAction("mouseButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayControl
    private readonly InputActionMap m_GameplayControl;
    private List<IGameplayControlActions> m_GameplayControlActionsCallbackInterfaces = new List<IGameplayControlActions>();
    private readonly InputAction m_GameplayControl_mousePosition;
    private readonly InputAction m_GameplayControl_mouseButton;
    public struct GameplayControlActions
    {
        private @HexControl m_Wrapper;
        public GameplayControlActions(@HexControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @mousePosition => m_Wrapper.m_GameplayControl_mousePosition;
        public InputAction @mouseButton => m_Wrapper.m_GameplayControl_mouseButton;
        public InputActionMap Get() { return m_Wrapper.m_GameplayControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayControlActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayControlActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayControlActionsCallbackInterfaces.Add(instance);
            @mousePosition.started += instance.OnMousePosition;
            @mousePosition.performed += instance.OnMousePosition;
            @mousePosition.canceled += instance.OnMousePosition;
            @mouseButton.started += instance.OnMouseButton;
            @mouseButton.performed += instance.OnMouseButton;
            @mouseButton.canceled += instance.OnMouseButton;
        }

        private void UnregisterCallbacks(IGameplayControlActions instance)
        {
            @mousePosition.started -= instance.OnMousePosition;
            @mousePosition.performed -= instance.OnMousePosition;
            @mousePosition.canceled -= instance.OnMousePosition;
            @mouseButton.started -= instance.OnMouseButton;
            @mouseButton.performed -= instance.OnMouseButton;
            @mouseButton.canceled -= instance.OnMouseButton;
        }

        public void RemoveCallbacks(IGameplayControlActions instance)
        {
            if (m_Wrapper.m_GameplayControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayControlActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayControlActions @GameplayControl => new GameplayControlActions(this);
    public interface IGameplayControlActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMouseButton(InputAction.CallbackContext context);
    }
}
